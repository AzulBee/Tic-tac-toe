import javax.swing.JOptionPane;
import java.util.Random;

public class Constructor {
    
    private final int USER = 1;
    private final int COMP = 0; 
    private final int ROW = 3;  
    private final int COLUMN = 3; 
    private final Random RANDOM = new Random (); 
    private int startPlayer; 
    private int userRow; 
    private int userColumn;
    private int compRow;
    private int compColumn;
    private int playAgain = JOptionPane.YES_NO_OPTION;
    private String spaces = "   "; 
    private String userToken;
    private String computerToken; 
    private String userName = "No Name"; 
    private String [][] board = new String [ROW][COLUMN]; 
    
    public String getUserToken () {
        return userToken;
    }
    
    public String getComputerToken () {
        return computerToken;
    }
   
    public String getUserName () {
        return userName;
    }
    
    public int getUserRow() {
        return userRow;
    }
    
    public int getUserColumn() {
        return userColumn;
    }
    
    public int getCompColumn () {
        return compColumn;
    }
    
    public int getCompRow () {
        return compRow;
    }
   
    public int getStartPlayer () {
        return startPlayer;
    }
   
    public void setStartPlayer () {
        startPlayer = RANDOM.nextInt(2); 
    }
    
    public void setSecondPlayer (int num) {
        startPlayer = num;
    }
    
    public void setTokens () {
        if (startPlayer == USER) {
            userToken = " X ";
            computerToken = " O ";
        } else if (startPlayer == COMP){
            userToken = " O ";
            computerToken = " X ";
        } else {
            JOptionPane.showMessageDialog(null, "Error. Restart.");
        }
        
    }
   
    public void userCoordinates () {
        userRow = Integer.parseInt(JOptionPane.showInputDialog(null,
                "Enter number for row (0-2): "));
        userColumn = Integer.parseInt(JOptionPane.showInputDialog(null,
                "Enter number for column (0-2): "));
        
    }
    
    public void checkUserCoordinates () {
        if (board[userRow][userColumn].matches(spaces)){
                board[userRow][userColumn] = userToken;
            } else {
                JOptionPane.showMessageDialog(null, "Invalid move. Try again.");
                userCoordinates();
            }
    }
   
    public void computerCoordinates () {
        compRow = RANDOM.nextInt(3);
        compColumn = RANDOM.nextInt(3);
        if (board[compRow][compColumn].matches(spaces)) {
            board[compRow][compColumn] = computerToken;
        } else {
            computerCoordinates();
        }
    }
   
    public void startBoard () {
        for (int i = 0; i < ROW; i++){
            for (int j = 0; j < COLUMN; j++){
                board[i][j] = spaces; 
            }
        }
    }
   
     public String printBoard(){
        String boardString = "";
       
        for (int i = 0; i < ROW; i++){
            if (i != 0)
                boardString += "\n---|---|---\n";
            for (int j = 0; j < COLUMN; j++){
                if (j != COLUMN - 1) {
                    boardString += board[i][j] + "|";  
                } else {
                    boardString += board[i][j];
                }
            }
        }
        boardString += "\n";
        return boardString;
    }
     
    public String setPlayer (int row, int column, String player) {
        if ((row >= 0 && row <= 2) && (column >= 0 && column <= 2)) {
            board[row][column] = player;
        } else {
            JOptionPane.showMessageDialog(null, "Invalid movee. Try again.");
            userCoordinates();
        }
        return board[row][column];
    }
   
    public boolean gameOver() {
        int i = 0;
        int j = 0;
        
        while (i < ROW) {
            if (!board[i][0].matches(spaces) && board[i][0].equals(board[i][1])
                    && board[i][1].equals(board[i][2])){
                        return true;
                    }
            }
        
        while (j < COLUMN) {
            if (!board[0][j].matches(spaces) && board[0][j].equals(board[1][j])
                    && board[1][j].equals(board[2][j])){
                return true;
            }
        }
        
        if (!board[0][0].matches(spaces) && board[0][0].equals(board[1][1])
                && board[1][1].equals(board[2][2])){
            return true;
        }
        if (!board[0][2].matches(spaces) && board[0][2].equals(board[1][1])
                && board[1][1].equals(board[2][0])){
            return true;
        }
        
        
        return false;
    }
    
    public boolean checkWinner () {
        for (int i = 0; i < board.length; i++) { 
            if (board[i][0].equals(board[i][1]) && board[i][1].equals
                (board[i][2]) && !board[i][0].matches(spaces)) {
                if (board[i][0].equals(userToken)) {
                    JOptionPane.showMessageDialog(null, "Congratulations "
                            + userName + "! You won");
                    return false;
                } else {
                    JOptionPane.showMessageDialog(null, "The computer won!");
                    return false;
                }
            }
            if (board[0][i].equals(board[1][i]) && board[1][i].equals
                (board[2][i]) && !board[0][i].matches(spaces)) {
                if (board[0][i].equals(userToken)) {
                    JOptionPane.showMessageDialog(null, "Congratulations "
                            + userName + "! You won");
                    return false;
                } else {
                    JOptionPane.showMessageDialog(null, "The computer won!");
                    return false;
                }
            }
            if (board[0][0].equals(board[1][1]) && board[1][1].equals
                (board[2][2]) && !board[0][0].matches(spaces)){
                if (board[0][0].equals(userToken)) {
                    JOptionPane.showMessageDialog(null, "Congratulations "
                            + userName + "! You won");
                    return false;
                } else {
                    JOptionPane.showMessageDialog(null, "The computer won!");
                    return false;
                }
            }
            if(board[0][2].equals(board[1][1])&& board[1][1].equals(board[2][0])
                  && !board[0][2].matches(spaces)){
                if (board[0][2].equals(userToken)) {
                    JOptionPane.showMessageDialog(null, "Congratulations "
                            + userName + "! You won");
                    return false;
                } else {
                    JOptionPane.showMessageDialog(null, "The computer won!");
                    return false;
                }
            }
        }
        return true;
    }
}
